(define (clear-line) (let ((next-char (read-char))) (if (not (or (eof-object? next-char) (char=? next-char #\newline))) (clear-line))))
(define (error message) (error-cont message))
(define error-continuation (let ((message (call-with-current-continuation (lambda (c) c)))) (if (string? message) (begin (display "Error: ") (display message) (newline) (clear-line))) message))
(define error-cont error-continuation)
(define (get-non-eof-char) (let ((char (read-char))) (if (eof-object? char) (error "end of file") char)))
(define (whitespace? char) (or (char=? char #\space) (char=? char #\newline)))
(define (delimiter? char) (or (eof-object? char) (whitespace? char) (char=? char #\() (char=? char #\)) (char=? char #\") (char=? char #\;)))
(define (read-start expect error-message) (let ((first-char (get-non-eof-char))) (if (char=? first-char expect) #t (error error-message))))
(define (token-make type value) (list type value))
(define (token-type token) (car token))
(define (token-data token) (cadr token))
